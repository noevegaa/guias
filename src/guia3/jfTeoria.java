/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package guia3;

/**
 *
 * @author josen
 */
public class jfTeoria extends javax.swing.JFrame {

    /**
     * Creates new form jfTeoria
     */
    public jfTeoria() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Yu Gothic UI", 2, 8)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setText("1.¿Qué es la programación orientada a objetos (POO)?\nEs un paradigma de programación que viene a innovar la forma de obtener resultados. Los objetos manipulan los datos de entrada para la obtención de datos de salida específicos, donde cada objeto ofrece una funcionalidad especial.\n\n2.¿Cuáles son los conceptos y nociones básicas de la POO?\n3.Explique de manera clara que es:\n\n-Polimorfismo: \nSe refiere a la propiedad por la que es posible enviar mensajes sintácticamente iguales a objetos de tipos distintos. El único requisito que deben cumplir los objetos que se usan de manera polimórfica es saber responder al mensaje que se les envía.\n                                                                                        \n-Abstracción:\nConsiste en aislar un elemento aislador su programa inválido que lo acompaña.\nExpresa las características esenciales de un objeto, las cuales distinguen al objeto de los demás.\n\n-Herencia:\n\nUn tipo de objeto de alto nivel puede especializarse en tipos de objeto de bajo nivel. Un tipo de objetos puede tener subtipos. Por ejemplo, el tipo de objeto persona puede tener subtipos estudiante y empleado. A su vez, el tipo de objeto estudiante puede tener como subtipo estudiante de pregrado y estudiante de postgrado, mientras que empleado puede tener como subtipo a académico y administrativo. Existe de este modo una jerarquía  de tipos, subtipos, subsubtipos, etc.  \n\n-Encapsulamiento:\nEl empaque conjunto de datos y método se llama encapsulado. El objeto esconde sus datos de los demás objetos y permite el acceso a los datos mediante sus propios métodos.\n\n4.¿Por qué es preferible usar POO a programación estructurada?\nEs preferible porque Java posee:\nLenguaje simple, Lenguaje orientado a objetos, Aplicaciones distribuidas, Interpretado y compilado y es segura.\n\n5.¿Qué ventajas posee usar JAVA  en el desarrollo de aplicaciones?\n\n\n6.Desglose cada uno de los siguientes conceptos en el ámbito de la POO:\n-Clase:\nEsta se refiere a la implantación en software de un tipo de objeto.\nEl tipo de objeto es una noción de concepto.\n\n\n\n-Método:\nLos métodos especifican la forma en que se controlan los datos de un objeto. Los métodos en un tipo de objeto solo hacen referencia a la estructura de datos de ese tipo de objeto.  \n-Constructor:\nEs u método especial de una clase que se llama automáticamente siempre que se declara un objeto de esa clase. Su función es inicializar el objeto y sirve para asegurarnos que los objetos siempre contengan valores válidos. \n-Librería:\nEs un conjunto de clases que poseen una serie de métodos y atributos. Lo realmente interesante de estas librerías para JAVA es que facilitan muchas operaciones.\n-Registro:\n\n-Dato:\nSon los tipos de datos primitivos ( int, boolean…), y objeto( String, array o arreglo…).\n-Valor:\nContenido que se mueve a través de las variables utilizadas.\n\n7.¿Cuáles son las características principales de los siguientes tipos de datos? (Limitaciones, posibilidades, uso, etc.)\n-int.\n-double\n-String\n-Object\n-Char\n\n8.¿Qué es la clase math en JAVA?\nEn general es la que nos aporta todas las operaciones matemáticas.\n9.¿Qué es una base de datos?\n");
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Regresar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Menu men=new Menu();
        men.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jfTeoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jfTeoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jfTeoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jfTeoria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jfTeoria().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
